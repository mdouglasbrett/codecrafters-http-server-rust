#[allow(unused_imports)]
use std::net::TcpListener;
use std::{
    collections::HashMap, io::{prelude::*, BufReader}, net::TcpStream
};

fn handle_request(mut stream: TcpStream) -> Result<(), Box<dyn std::error::Error>> {
    let reader = BufReader::new(&stream);
    let mut lines = reader.lines();
    let start_line = lines.next().unwrap()?;
    let mut start_parts = start_line.split_whitespace();
    let method = start_parts.next();
    let path = start_parts
        .next()
        // TODO: handle this...
        .unwrap()
        .split("/")
        .filter(|s| !s.is_empty())
        .collect::<Vec<&str>>();

    let route = if path.is_empty() {
        "/"
    } else {
        path[0]
    };

    let mut headers_map = HashMap::new();

    for header in lines.next() {
        let key_value = header.unwrap().split_terminator(":").collect::<Vec<&str>>();
        &headers_map.insert(key_value[0], key_value[1]);
    }

    println!("headers: {:?}", headers_map);

    match (method, route) {
        (Some("GET"), "/") => {
            stream.write("HTTP/1.1 200 OK\r\n\r\n".as_bytes())?;
            Ok(())
        },
        (Some("GET"), "echo") => {
            stream.write(
                format!(
                    "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: {}\r\n\r\n{}",
                    path[1].len(),
                    path[1]
                )
                .as_bytes(),
            )?;
            Ok(())
        },
        (Some("GET"), "user-agent") => {
            stream.write(
                format!(
                    "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: {}\r\n\r\n{}",
                    path[1].len(),
                    path[1]
                )
                .as_bytes(),
            )?;
            Ok(())
        }
        _ => {
            stream.write("HTTP/1.1 404 Not Found\r\n\r\n".as_bytes())?;
            Ok(())
        }
    }
}

fn main() {
    // You can use print statements as follows for debugging, they'll be visible when running tests.
    println!("Logs from your program will appear here!");

    // Uncomment this block to pass the first stage

    let listener = TcpListener::bind("127.0.0.1:4221").unwrap();

    for stream in listener.incoming() {
        match stream {
            Ok(stream) => handle_request(stream).unwrap(),
            Err(e) => {
                println!("error: {}", e);
            }
        }
    }
}
